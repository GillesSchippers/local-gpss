name: Build and Release

on:
  push:
    tags:
      - "v*"
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.project }} for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: linux-x64
            output: "Linux (x64)"
            project: server
          - os: ubuntu-latest
            arch: linux-arm64
            output: "Linux (arm64)"
            project: server
          - os: windows-latest
            arch: win-x64
            output: "Windows (x64)"
            project: server
          - os: windows-latest
            arch: "Windows (x64)"
            output: win64
            project: client
      fail-fast: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Install NuGet
        if: runner.os == 'Windows'
        run: |
          nuget update -self
          nuget install nuget.commandline -OutputDirectory .nuget -ExcludeVersion
          echo "$(pwd)/.nuget/nuget.commandline/tools" >> $GITHUB_PATH

      - name: Restore .NET workloads
        run: |
          dotnet workload restore

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
        
      - name: Restore NuGet dependencies for GPSS
        if: runner.os == 'Windows'
        run: nuget restore "${{ github.workspace }}/GPSS.sln" -NoCache

      - name: Setup environment variables
        id: setup_env
        shell: bash
        run: |
          if [ "${{ matrix.project }}" = "server" ]; then
            PROJECT_PATH="Server/GPSS Server.csproj"
            EXECUTABLE_NAME="GPSS Server"
          else
            PROJECT_PATH="Client/GPSS Client.csproj"
            EXECUTABLE_NAME="GPSS Client"
          fi
          EXECUTABLE_DIR="./output/${EXECUTABLE_NAME} ${{ matrix.output }}"
          echo "project_path=$PROJECT_PATH" >> $GITHUB_OUTPUT
          echo "executable_name=$EXECUTABLE_NAME" >> $GITHUB_OUTPUT
          echo "executable_dir=$OUTPUT_PATH" >> $GITHUB_OUTPUT

      - name: Publish ${{ matrix.project }} ${{ matrix.arch }}
        shell: bash
        run: |
          if [ "${{ matrix.project }}" = "client" ]; then
            FRAMEWORK="-f net9.0-windows10.0.19041.0"
          else
            FRAMEWORK=""
          fi
          dotnet publish "${{ steps.setup_env.outputs.project_path }}" -c Release -o "${{ steps.setup_env.outputs.executable_dir }}" --self-contained true \
            -p:PublishReadyToRun=true -p:PublishSingleFile=true \
            -p:EnableCompressionInSingleFile=true \
            -p:DebugType=None -p:DebugSymbols=false \
            -r "${{ matrix.arch }}" $FRAMEWORK

      - name: Set execute permissions (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          chmod +x "${{ steps.setup_env.outputs.executable_dir }}/${{ steps.setup_env.outputs.executable_name }}"

      - name: Create ZIP archive
        shell: bash
        run: |
          cd output
          ZIPNAME="../${{ steps.setup_env.outputs.executable_name }} ${{ matrix.output }}.zip"
          DIRNAME="${{ steps.setup_env.outputs.executable_name }} ${{ matrix.output }}"
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a -tzip "$ZIPNAME" "$DIRNAME"/*
          else
            zip -r "$ZIPNAME" "$DIRNAME"/*
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.setup_env.outputs.executable_name }} ${{ matrix.output }}"
          path: "${{ steps.setup_env.outputs.executable_name }} ${{ matrix.output }}.zip"
          retention-days: 1

  check-tag:
    name: Check if tag is on master
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      is_master: ${{ steps.check.outputs.is_master }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to fetch all tags and history

      - name: Check if tag is on master
        id: check
        run: |
          TAG_SHA=$(git rev-parse ${{ github.ref_name }})
          MASTER_SHA=$(git rev-parse origin/master)
          if [ "$TAG_SHA" = "$MASTER_SHA" ]; then
            echo "is_master=true" >> $GITHUB_OUTPUT
          else
            echo "is_master=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Create Release
    needs: [build, check-tag]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.check-tag.outputs.is_master == 'true'

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body: "Fill me in before releasing this."
          draft: true
          prerelease: false