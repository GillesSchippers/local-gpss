name: Upgrade PKHeX

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and update PKHeX and verify GPSS still compiles
    outputs:
      tag: ${{ steps.tagfetch.outputs.tag }}
    runs-on: windows-latest
    permissions:
      contents: read
    strategy:
      fail-fast: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find latest matching tag and checkout PKHeX-Plugins and PKHeX
        id: tagfetch
        shell: bash
        run: |
          set -e

          # Fetch all tags from PKHeX-Plugins, sorted newest first
          PLUGINS_TAGS=$(git ls-remote --tags --refs --sort="-v:refname" https://github.com/santacrab2/PKHeX-Plugins.git | awk -F/ '{print $NF}' | grep -E '^[0-9]{2}\.[0-9]{2}\.[0-9]{2}$')

          # Try each tag, newest first
          for TAG in $PLUGINS_TAGS; do
            # Check if PKHeX has the same tag
            if git ls-remote --tags --refs https://github.com/kwsch/PKHeX.git | grep -q "refs/tags/$TAG$"; then
              echo "Found matching tag: $TAG"
              echo "tag=$TAG" >> $GITHUB_OUTPUT
              break
            fi
          done

          # Fail if no tag was found
          if [ -z "$TAG" ]; then
            echo "No matching tag found between PKHeX-Plugins and PKHeX."
            exit 1
          fi

          # Clone PKHeX-Plugins at the matching tag
          git clone --branch "$TAG" --depth 1 --recurse-submodules https://github.com/santacrab2/PKHeX-Plugins.git "${{ github.workspace }}/PKHeX-Plugins"

          # Clone PKHeX at the matching tag
          git clone --branch "$TAG" --depth 1 --recurse-submodules https://github.com/kwsch/PKHeX.git "${{ github.workspace }}/PKHeX"

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install NuGet
        run: |
          nuget update -self
          nuget install nuget.commandline -OutputDirectory .nuget -ExcludeVersion
          echo "$(pwd)/.nuget/nuget.commandline/tools" >> $GITHUB_PATH

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet dependencies for PKHeX-Plugins
        run: nuget restore "${{ github.workspace }}/PKHeX-Plugins/PKHeX-Plugins.sln"

      - name: Restore NuGet dependencies for PKHeX
        run: nuget restore "${{ github.workspace }}/PKHeX/PKHeX.sln" -NoCache

      - name: Build PKHeX.Core
        run: |
          msbuild "${{ github.workspace }}/PKHeX/PKHeX.Core/PKHeX.Core.csproj" /p:Configuration=Release /p:Platform="Any CPU"

      - name: Copy PKHeX.Core.dll to NuGet cache
        shell: powershell
        run: |
          $nugetver = (Get-ChildItem "$env:UserProfile/.nuget/packages/pkhex.core" | Sort-Object -Property LastWriteTime -Descending)[0].Name
          Copy-Item "${{ github.workspace }}/PKHeX/PKHeX.Core/bin/Any CPU/Release/net9.0/PKHeX.Core.dll" "$env:UserProfile/.nuget/packages/pkhex.core/$nugetver/lib/net9.0"

      - name: Build PKHeX.Core.AutoMod
        run: |
          msbuild "${{ github.workspace }}/PKHeX-Plugins/PKHeX.Core.AutoMod/PKHeX.Core.AutoMod.csproj" /p:Configuration=Release /p:Platform="Any CPU"

      - name: Prepare dlls
        run: |
          xcopy "${{ github.workspace }}\PKHeX-Plugins\PKHeX.Core.AutoMod\bin\Any CPU\Release\net9.0\PKHeX.Core.AutoMod.dll" "${{ github.workspace }}\Shared\Deps" /Y
          xcopy "${{ github.workspace }}\PKHeX\PKHeX.Core\bin\Any CPU\Release\net9.0\PKHeX.Core.dll" "${{ github.workspace }}\Shared\Deps" /Y

      #- name: Remove other repo directories
      #  run: |
      #    # Remove PKHeX-Plugins directory
      #    Remove-Item -Recurse -Force "${{ github.workspace }}/PKHeX-Plugins"
      #    # Remove PKHeX directory
      #    Remove-Item -Recurse -Force "${{ github.workspace }}/PKHeX"
    
      #- name: Restore .NET (dependencies and workloads)
      #  run: |
      #    dotnet restore "${{ github.workspace }}/Server/GPSS Server.csproj"
      #    dotnet restore "${{ github.workspace }}/Client/GPSS Client.csproj"
      #    dotnet workload restore "${{ github.workspace }}/Server/GPSS Server.csproj"
      #    dotnet workload restore "${{ github.workspace }}/Client/GPSS Client.csproj"
        
      #- name: Build GPSS
      #  shell: bash
      #  run: |
      #    dotnet publish "${{ github.workspace }}/Server/GPSS Server.csproj" -c Release --self-contained true \
      #      -p:PublishReadyToRun=true -p:PublishSingleFile=true \
      #      -p:EnableCompressionInSingleFile=true \
      #      -p:DebugType=None -p:DebugSymbols=false \
      #      -r "win-x64"
      #    dotnet publish "${{ github.workspace }}/Client/GPSS Client.csproj" -c Release --self-contained true \
      #      -p:PublishReadyToRun=true -p:PublishSingleFile=true \
      #      -p:EnableCompressionInSingleFile=true \
      #      -p:DebugType=None -p:DebugSymbols=false \
      #      -r "win-x64" -f "net9.0-windows10.0.19041.0"
     
  commit-and-push:
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    if: needs.build.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to create a new branch

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: pkhex-upgrade/${{ needs.build.outputs.tag || 'auto' }}
          title: "Update PKHeX.Core.dll and PKHeX.Core.AutoMod.dll"
          body: "Automated update of PKHeX.Core.dll and PKHeX.Core.AutoMod.dll"
          commit-message: "Update PKHeX.Core.dll and PKHeX.Core.AutoMod.dll to the latest version from PKHeX-Plugins and PKHeX."
          add-paths: |
            "Shared/Deps/PKHeX.Core.dll"
            "Shared/Deps/PKHeX.Core.AutoMod.dll"
          assignees: "GillesSchippers"
          sign-commits: true
          delete-branch: true
          signoff: true
